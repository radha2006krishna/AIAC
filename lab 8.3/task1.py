import re
def is_valid_email(email):
    # Must contain exactly one @
    if email.count('@') != 1:
        return False
    # Must contain at least one .
    if '.' not in email:
        return False
    # Must not start or end with special characters
    if not re.match(r'^[A-Za-z0-9][A-Za-z0-9@._-]*[A-Za-z0-9]$', email):
        return False
    # @ must not be at the start or end
    if email.startswith('@') or email.endswith('@'):
        return False
    # . must not be at the start or end
    if email.startswith('.') or email.endswith('.'):
        return False
    return True
# Test cases generated by AI
def test_is_valid_email():
    # Valid emails
    assert is_valid_email("user@example.com")
    assert is_valid_email("john.doe@mail.co")
    assert is_valid_email("a_b-c@domain.org")
    # Invalid: no @
    assert not is_valid_email("userexample.com")
    # Invalid: no .
    assert not is_valid_email("user@examplecom")
    # Invalid: multiple @
    assert not is_valid_email("user@@example.com")
    # Invalid: starts with special char
    assert not is_valid_email(".user@example.com")
    assert not is_valid_email("@user@example.com")
    # Invalid: ends with special char
    assert not is_valid_email("user@example.com.")
    assert not is_valid_email("user@example.com@")
    # Invalid: only special chars
    assert not is_valid_email("@.")
    # Valid: numbers and letters
    assert is_valid_email("user123@domain456.com")
    print("All test cases passed.")

if __name__ == "__main__":
    test_is_valid_email()